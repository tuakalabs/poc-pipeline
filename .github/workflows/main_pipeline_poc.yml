name: Main Pipeline POC

on:
  push:
    branches:
      - main
    paths:
      - "backend/Services/**"
  pull_request:
    branches:
      - main
    paths:
      - "backend/Services/**"

jobs:
  setup:
    name: "Setup Pipeline"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Git Setup
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESSTOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"

      - name: Calculate new version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true

      - name: Display version
        run: echo ${{ steps.gitversion.outputs.semVer }}

  detect-changes:
    name: Detecting Changes
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-changed-services.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Filter changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            services:
              - 'backend/Services/**'

      - name: Set changed services output
        id: set-changed-services
        run: |
          # Extract the list of unique service directories that have changes
          changed_files="${{ steps.filter.outputs.services_files }}"
          echo "Changed files: $changed_files"

          if [ -n "$changed_files" ] && [ "$changed_files" != "null" ]; then
            # Extract service names from the paths
            changed_services=$(echo "$changed_files" | jq -r 'map(split("/")[2]) | unique | .[]')
          else
            changed_services=""
          fi

          if [ -z "$changed_services" ]; then
            echo "No services changed."
            changed_services="[]"
          else
            echo "Changed services: $changed_services"
            changed_services=$(echo "$changed_services" | jq -R -s -c 'split("\n")[:-1]')
          fi

          echo "services=$changed_services" >> $GITHUB_ENV

  # build-docker-images:
  #   needs: detect-changes
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: ${{ fromJson(needs.detect-changes.outputs.services) }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Build Docker image for ${{ matrix.service }}
  #       run: |
  #         SERVICE_PATH=backend/Services/${{ matrix.service }}
  #         IMAGE_NAME=${{ matrix.service }}
  #         echo "Building Docker image for $SERVICE_PATH"
  #         docker build -t my-registry/$IMAGE_NAME:latest $SERVICE_PATH
  #         docker push my-registry/$IMAGE_NAME:latest

  # run-tests:
  #   needs: build-docker-images
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run tests
  #       run: |
  #         echo "Running tests after all Docker builds have completed."
  #         # Add your test commands here
